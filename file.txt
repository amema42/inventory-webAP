--- backend/ index.js ---

const express = require("express");
const bodyParser = require("body-parser");
const { Pool } = require("pg");
const cors = require("cors"); // Importo cors: [DOCUMENTAZIONE] https://www.npmjs.com/package/cors
const validSizes = ["L", "S", "M"]; // definizione valori validi per size

const app = express();
const port = 5000;

app.use(bodyParser.json());
app.use(cors()); // Usa cors [reference: linea 4 di questa pagina]

const pool = new Pool({
  connectionString:
    process.env.DATABASE_URL ||
    "postgres://user:password@database:5432/inventory",
});

// Rotta (route; ) di esempio per testare il server // il file route.js rimosso (non so fare/non funziona l'integrazione :)
app.get("/", (req, res) => {
  res.send("Hello World!");
});

// route per: ottenere tutti gli articoli
app.get("/articles", async (req, res) => {
  try {
    const result = await pool.query("SELECT * FROM articles");
    res.send(result.rows);
  } catch (err) {
    res.status(500).send(err.message);
  }
});

//route per: creare un nuovo articolo // [INTEGRATA :) ]
app.post("/articles", async (req, res) => {
  const { name, description, quantity, size } = req.body;
  if (!validSizes.includes(size)) {
    return res.status(400).send("Invalid size");
  }
  try {
    const result = await pool.query(
      "INSERT INTO articles (name, description, quantity, size) VALUES ($1, $2, $3, $4) RETURNING *",
      [name, description, quantity, size],
    );
    await pool.query(
      "INSERT INTO history (article_id, action_type, details) VALUES ($1, 'create', $2)",
      [
        result.rows[0].id,
        `Created article with quantity ${quantity} and size ${size}`,
      ],
    );
    res.status(201).send(result.rows[0]);
  } catch (err) {
    res.status(500).send(err.message);
  }
});

// route per:  per aggiornare un articolo esistente //da integrare in BackEend e db
app.put("/articles/:id", async (req, res) => {
  const id = req.params.id;
  const { name, description, quantity, size } = req.body;
  //aggiungo: controllo su: SIZE
  if (!validSizes.includes(size)) {
    return res.status(400).send("Invalid size");
  }
  try {
    const result = await pool.query(
      "UPDATE articles SET name = $1, description = $2, quantity = $3, size = $4 WHERE id = $5 RETURNING *",
      [name, description, quantity, size, id],
    );
    if (result.rows.length > 0) {
      await pool.query(
        "INSERT INTO history (article_id, action_type, details) VALUES ($1, 'update', $2)",
        [id, `Updated article to quantity ${quantity} and size ${size}`],
      );
      res.send(result.rows[0]);
    } else {
      res.status(404).send("Article not found");
    }
  } catch (err) {
    res.status(500).send(err.message);
  }
});

// route per:  per eliminare un articolo // da integrare nel (FrontEnd: ) e (db: postgress)
app.delete("/articles/:id", async (req, res) => {
  const id = req.params.id;
  try {
    const result = await pool.query(
      "DELETE FROM articles WHERE id = $1 RETURNING *",
      [id],
    );
    if (result.rows.length > 0) {
      await pool.query(
        "INSERT INTO history (article_id, action_type, details) VALUES ($1, 'delete', $2)",
        [id, `Deleted article with name ${result.rows[0].name}`],
      );
      res.send(result.rows[0]);
    } else {
      res.status(404).send("Article not found");
    }
  } catch (err) {
    res.status(500).send(err.message);
  }
});

//Storico (1) e statistiche (2)

app.get("/articles/:id/history", async (req, res) => {
  const articleId = req.params.id;
  try {
    const result = await pool.query(
      "SELECT * FROM history WHERE article_id = $1 ORDER BY action_date DESC",
      [articleId],
    );
    res.send(result.rows);
  } catch (err) {
    res.status(500).send(err.message);
  }
});

//(2) statistiche
app.get("/articles/:id/statistics", async (req, res) => {
  const id = req.params.id;
  try {
    const totalActions = await pool.query(
      "SELECT COUNT(*) FROM history WHERE article_id = $1",
      [id],
    );
    const totalCreated = await pool.query(
      "SELECT COUNT(*) FROM history WHERE article_id = $1 AND action_type = 'created'",
      [id],
    );
    const totalUpdated = await pool.query(
      "SELECT COUNT(*) FROM history WHERE article_id = $1 AND action_type = 'updated'",
      [id],
    );
    const totalDeleted = await pool.query(
      "SELECT COUNT(*) FROM history WHERE article_id = $1 AND action_type = 'deleted'",
      [id],
    );
    const statistics = {
      total_actions: totalActions.rows[0].count,
      total_created: totalCreated.rows[0].count,
      total_updated: totalUpdated.rows[0].count,
      total_deleted: totalDeleted.rows[0].count,
    };
    res.send(statistics);
  } catch (err) {
    res.status(500).send(err.message);
  }
});
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});

--- database/ init.sql ---

-- Creazione della tabella (main) articles
CREATE TABLE articles (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255),
  description TEXT,
  quantity INT,
  size VARCHAR(1) CHECK (size IN ('L', 'S', 'M'))
);

-- nuova tabella per lo storico delle azioni sui prodotti
CREATE TABLE history (
  id SERIAL PRIMARY KEY,
  article_id INT REFERENCES articles(id),
  action_type VARCHAR(50), -- def. tipo di azione: sggiuynta/rimozione...
  action_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  details TEXT -- Dettagli ipertext aggiuntivi, se necessario
);

-- Insert: alcuni articoli di esempio, preInseriti
INSERT INTO articles (name, description, quantity, size) VALUES
('Article 1', 'Description for Article 1', 10, 'L'),
('Article 2', 'Description for Article 2', 20, 'S'),
('Article 3', 'Description for Article 3', 30, 'M');

--- FrontEnd/src/App.js ---

import React, { useState } from "react";
import ArticleList from "./ArticleList"; // import: componente ArticleList, definito in src/ArticleList.js

function App() {
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [quantity, setQuantity] = useState("");
  const [size, setSize] = useState("L");

  const handleSubmit = (e) => {
    e.preventDefault();

    const newArticle = { name, description, quantity, size };

    fetch("http://localhost:5000/articles", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(newArticle),
    })
      .then((response) => response.json())
      .then(() => {
        setName("");
        setDescription("");
        setQuantity("");
        setSize("L");
      })
      .catch((error) => console.error("Error creating article:", error));
  };

  return (
    <div>
      <h1>Inventory App v.0.1</h1>
      <form onSubmit={handleSubmit}>
        <div>
          <label>
            Name:
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
            />
          </label>
        </div>
        <div>
          <label>
            Description:
            <input
              type="text"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              required
            />
          </label>
        </div>
        <div>
          <label>
            Quantity:
            <input
              type="number"
              value={quantity}
              onChange={(e) => setQuantity(e.target.value)}
              required
            />
          </label>
        </div>
        <div>
          <label>
            Size:
            <select
              value={size}
              onChange={(e) => setSize(e.target.value)}
              required
            >
              <option value="L">L</option>
              <option value="M">M</option>
              <option value="S">S</option>
            </select>
          </label>
        </div>
        <button type="submit">Add Article</button>
      </form>
      <ArticleList />{" "}
      {/* dopo il casino di struttura sopra, aggiungo Article List qui (da Sistemare in FrontEnd) */}
    </div>
  );
}

--- FrontEnd/src/ArticleList.js

export default App;
import React, { useState, useEffect } from "react";
import axios from "axios";

const ArticleList = () => {
  const [articles, setArticles] = useState([]);
  const [editingArticle, setEditingArticle] = useState(null);
  //history & statistics
  const [history, setHistory] = useState(null);
  const [statistics, setStatistics] = useState(null);

  useEffect(() => {
    const fetchArticles = async () => {
      try {
        const response = await axios.get("http://localhost:5000/articles");
        setArticles(response.data);
      } catch (error) {
        console.error("Error fetching articles:", error);
      }
    };

    fetchArticles();
  }, []);

  const viewHistory = async (id) => {
    try {
      const response = await axios.get(
        `http://localhost:5000/articles/${id}/history`,
      );
      setHistory(response.data); // imposta lo storico nello stato (history) (non sono sicuro serva)
      console.log(response.data); // Visualizza/in output lo storico su console (non sono sicuro serva)
    } catch (error) {
      console.error("Error fetching history:", error);
    }
  };

  const viewStatistics = async (id) => {
    try {
      const response = await axios.get(
        `http://localhost:5000/articles/${id}/statistics`,
      );
      setStatistics(response.data); // imposta statistiche nello stato; (non sono sicuro serva)
      console.log(response.data); // statistiche in output su console ((non sono sicuro serva))
    } catch (error) {
      console.error("Error fetching statistics:", error);
    }
  };

  const handleDelete = async (id) => {
    try {
      await axios.delete(`http://localhost:5000/articles/${id}`);
      setArticles(articles.filter((article) => article.id !== id));
    } catch (error) {
      console.error("Error deleting article:", error);
    }
  };

  const handleEdit = (article) => {
    setEditingArticle(article);
  };

  const handleUpdate = async (e) => {
    e.preventDefault();
    const { id, name, description, quantity, size } = editingArticle;
    try {
      const response = await axios.put(`http://localhost:5000/articles/${id}`, {
        name,
        description,
        quantity,
        size,
      });
      setArticles(
        articles.map((article) => {
          if (article.id === id) {
            return response.data; // if (l'articolo) ha lo stesso :id di quello che vogliamo aggiornare -> sostituiamo con i nuovi dati.
          } else {
            return article; // altrimenti ltrimenti: -> manteniamo l'articolo così com'era.
          }
        }),
      );
      setEditingArticle(null);
    } catch (error) {
      console.error("Error updating article:", error);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setEditingArticle({
      ...editingArticle,
      [name]: value,
    });
  };

  return (
    <div>
      <h1>Articles</h1>
      <ul>
        {articles.map((article) => (
          <li key={article.id}>
            <h2>{article.name}</h2>
            <p>{article.description}</p>
            <p>Quantity: {article.quantity}</p>
            <p>Size: {article.size}</p>
            <button onClick={() => handleEdit(article)}>Edit</button>
            <button onClick={() => handleDelete(article.id)}>Delete</button>
            <button onClick={() => viewHistory(article.id)}>
              View History
            </button>
            <button onClick={() => viewStatistics(article.id)}>
              View Statistics
            </button>
          </li>
        ))}
      </ul>
      {editingArticle && (
        <form onSubmit={handleUpdate}>
          <div>
            <label>
              Name:
              <input
                type="text"
                name="name"
                value={editingArticle.name}
                onChange={handleChange}
                required
              />
            </label>
          </div>
          <div>
            <label>
              Description:
              <input
                type="text"
                name="description"
                value={editingArticle.description}
                onChange={handleChange}
                required
              />
            </label>
          </div>
          <div>
            <label>
              Quantity:
              <input
                type="number"
                name="quantity"
                value={editingArticle.quantity}
                onChange={handleChange}
                required
              />
            </label>
          </div>
          <div>
            <label>
              Size:
              <select
                name="size"
                value={editingArticle.size}
                onChange={handleChange}
                required
              >
                <option value="L">L</option>
                <option value="M">M</option>
                <option value="S">S</option>
              </select>
            </label>
          </div>
          <button type="submit">Update Article</button>
        </form>
      )}
      {history && (
        <div>
          <h2>History</h2>
          <ul>
            {history.map((entry) => (
              <li key={entry.id}>
                {entry.action_date}: {entry.action_type} - {entry.details}
              </li>
            ))}
          </ul>
        </div>
      )}
      {statistics && (
        <div>
          <h2>Statistics</h2>
          <p>Total Actions: {statistics.total_actions}</p>
          <p>Total Created: {statistics.total_created}</p>
          <p>Total Updated: {statistics.total_updated}</p>
          <p>Total Deleted: {statistics.total_deleted}</p>
        </div>
      )}
    </div>
  );
};

export default ArticleList;

--- FrontEnd/src/index.js ---

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
